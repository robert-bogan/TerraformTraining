# Define global variables
variables:
- group: 'terraform-backend'

# Define stages
stages:
  - stage: Unit
    condition: ne(variables['Build.Reason'], 'PullRequest')
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
    
    - job: Test
      displayName: 'Test'
      continueOnError: false
      steps:

      # Install Terraform
      - task: TerraformInstaller@0
        displayName: 'Terraform Install'
        inputs:
          terraformVersion: 'latest'

      # Install Go
      - task: GoTool@0
        displayName: 'Go Install'
        inputs:
          version: '1.18.2'

      # Create test module
      - task: Go@0
        displayName: 'Create test module'  
        inputs:
          command: 'custom'
          customCommand: 'mod'
          arguments: 'init module'
          workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'

      # Add module dependencies
      - task: Go@0
        displayName: 'Get test dependencies'
        inputs:
          command: 'custom'
          customCommand: 'mod'
          arguments: 'tidy'
          workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'
      
      # Run Go Test
      - task: Go@0
        displayName: 'Run tests'
        inputs:
          command: 'test'
          arguments: '-timeout 1h -v unit_test.go'
          workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'
        env:
            ARM_TENANT_ID: $(TenantId)
            ARM_CLIENT_ID: $(ServicePrincipalId)
            ARM_CLIENT_SECRET: $(ServicePrincipalKey)
            ARM_SUBSCRIPTION_ID: $(SubscriptionId)
  - stage: Integration
    condition: or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
    
    - job: Test
      displayName: 'Test'
      continueOnError: false
      steps:

    # Install Terraform
    - task: TerraformInstaller@0
      displayName: 'Terraform Install'
      inputs:
        terraformVersion: 'latest'

    # Install Go
    - task: GoTool@0
      displayName: 'Go Install'
      inputs:
        version: '1.18.2'

    # Create test module
    - task: Go@0
      displayName: 'Create test module'  
      inputs:
        command: 'custom'
        customCommand: 'mod'
        arguments: 'init module'
        workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'

    # Add module dependencies
    - task: Go@0
      displayName: 'Get test dependencies'
      inputs:
        command: 'custom'
        customCommand: 'mod'
        arguments: 'tidy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'

      # Run Go Test
      - task: Go@0
        displayName: 'Run tests'
        inputs:
          command: 'test'
          arguments: '-timeout 1h -v integration_test.go'
          workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'
        env:
            ARM_TENANT_ID: $(TenantId)
            ARM_CLIENT_ID: $(ServicePrincipalId)
            ARM_CLIENT_SECRET: $(ServicePrincipalKey)
            ARM_SUBSCRIPTION_ID: $(SubscriptionId)