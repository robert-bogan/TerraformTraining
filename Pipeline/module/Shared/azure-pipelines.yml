# Define global variables
variables:
- group: 'terraform-backend'

# Define stages
stages:
  - stage: Unit
    condition: ne(variables['Build.Reason'], 'PullRequest')
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
    
      - job: Test
        displayName: 'Test'
        continueOnError: false
        steps:

        # Install Terraform
        - task: TerraformInstaller@0
          displayName: 'Terraform Install'
          inputs:
            terraformVersion: 'latest'
          
        # Initialise Terraform
        - task: TerraformCLI@0
          displayName: 'Terraform Initialise'
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/'
            backendType: 'azurerm'
            backendServiceArm: '$(backendServiceArm)'
            ensureBackend: true
            backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
            backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
            backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
            backendAzureRmContainerName: '$(backendAzureRmContainerName)'
            backendAzureRmKey: '$(backendAzureRmKey)'
          
        # Validate Terraform
        - task: TerraformCLI@0
          displayName: 'Terraform Validate'
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/'
          
        # Download Regula
        - task: DownloadGitHubRelease@0
          displayName: 'Download Regula'
          inputs:
            connection: 'wesley-trust'
            userRepository: 'fugue/regula'
            defaultVersionType: 'latest'
            itemPattern: '*Linux_x86_64.tar.gz'
            downloadPath: '$(System.ArtifactsDirectory)/regula' 
        
        # Configure Regula
        - bash: |
            # Change to directory containing regula download
            cd $(System.ArtifactsDirectory)/regula
            # Add filename to variable
            REGULA=$(ls -p | grep -v /)
            # Extract archive
            tar -xf $REGULA
            # Remove archive
            rm --f $REGULA
            # Add Regula to PATH
            echo "##vso[task.prependpath]$(System.ArtifactsDirectory)/regula"
          name: 'ConfigureRegula'
          displayName: 'Configure Regula'
        
        # Scan with Regula
        - bash: |
            # Scan files with Regula
            regula run $(System.DefaultWorkingDirectory)/v12/ -s critical
          name: 'RegulaScan'
          displayName: 'Scan Terraform files with Regula'

        # Install Go
        - task: GoTool@0
          displayName: 'Go Install'
          inputs:
            version: '1.18.2'

        # Create test module
        - task: Go@0
          displayName: 'Create test module'  
          inputs:
            command: 'custom'
            customCommand: 'mod'
            arguments: 'init module'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'

        # Add module dependencies
        - task: Go@0
          displayName: 'Get test dependencies'
          inputs:
            command: 'custom'
            customCommand: 'mod'
            arguments: 'tidy'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'
        
        # Run Go Test
        - task: Go@0
          displayName: 'Run tests'
          inputs:
            command: 'test'
            arguments: '-timeout 1h -v unit_test.go'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'
          env:
              ARM_TENANT_ID: $(TenantId)
              ARM_CLIENT_ID: $(ServicePrincipalId)
              ARM_CLIENT_SECRET: $(ServicePrincipalKey)
              ARM_SUBSCRIPTION_ID: $(SubscriptionId)
  - stage: Integration
    condition: or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
    
      - job: Test
        displayName: 'Test'
        continueOnError: false
        steps:

        # Install Terraform
        - task: TerraformInstaller@0
          displayName: 'Terraform Install'
          inputs:
            terraformVersion: 'latest'

        # Install Go
        - task: GoTool@0
          displayName: 'Go Install'
          inputs:
            version: '1.18.2'

        # Create test module
        - task: Go@0
          displayName: 'Create test module'  
          inputs:
            command: 'custom'
            customCommand: 'mod'
            arguments: 'init module'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'

        # Add module dependencies
        - task: Go@0
          displayName: 'Get test dependencies'
          inputs:
            command: 'custom'
            customCommand: 'mod'
            arguments: 'tidy'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'

        # Run Go Test
        - task: Go@0
          displayName: 'Run tests'
          inputs:
            command: 'test'
            arguments: '-timeout 1h -v integration_test.go'
            workingDirectory: '$(System.DefaultWorkingDirectory)/v12/Modules/tests'
          env:
              ARM_TENANT_ID: $(TenantId)
              ARM_CLIENT_ID: $(ServicePrincipalId)
              ARM_CLIENT_SECRET: $(ServicePrincipalKey)
              ARM_SUBSCRIPTION_ID: $(SubscriptionId)