variables:
- group: 'terraform-backend'
- group: 'terraform-system'
stages:
- stage: Validate
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: Import
    continueOnError: false
    steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform Install'
      inputs:
        terraformVersion: '$(terraformVersion)'
    - task: TerraformCLI@0
      displayName: 'Terraform Initialise'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/v25/'
        backendType: 'azurerm'
        backendServiceArm: '$(backendServiceArm)'
        ensureBackend: true
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
    - task: DownloadGitHubRelease@0
      displayName: 'Download Regula'
      inputs:
        connection: 'wesley-trust'
        userRepository: 'fugue/regula'
        defaultVersionType: 'latest'
        itemPattern: '*Linux_x86_64.tar.gz'
        downloadPath: '$(System.ArtifactsDirectory)/regula' 
    - bash: |
        # Change to directory containing regula download
        cd $(System.ArtifactsDirectory)/regula
        # Add filename to variable
        REGULA=$(ls -p | grep -v /)
        # Extract archive
        tar -xf $REGULA
        # Remove archive
        rm --f $REGULA
        # Add Regula to PATH
        echo "##vso[task.prependpath]$(System.ArtifactsDirectory)/regula"
      name: 'ConfigureRegula'
      displayName: 'Configure Regula'
    - bash: |
        cd $(System.DefaultWorkingDirectory)/v25/
        regula run -i rules/
      name: 'RegulaScan'
      displayName: 'Scan with Regula'
    - task: TerraformCLI@0
      displayName: 'Terraform Validate'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/v25/'
- stage: Plan
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: Validate
  jobs:
  - job: Evaluate
    continueOnError: false
    steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform Install'
      inputs:
        terraformVersion: '$(terraformVersion)'
    - task: TerraformCLI@0
      displayName: 'Terraform Initialise'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/v25/'
        backendType: 'azurerm'
        backendServiceArm: '$(backendServiceArm)'
        ensureBackend: true
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
    - bash: |
          mkdir -p $(Pipeline.Workspace)/Output
      name: 'Directory'
      displayName: 'Create artifact directory'
    - task: TerraformCLI@0
      name: 'Plan'
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/v25/'
        environmentServiceName: '$(backendServiceArm)'
        publishPlanResults: 'terraform.tfplan'
        commandOptions: '-out=$(Pipeline.Workspace)/Output/terraform.tfplan -detailed-exitcode'
    - bash: |
        if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] ; then
          echo "##vso[task.setvariable variable=ShouldRun;isOutput=true]true"
          fi
      name: 'Variable'
      displayName: 'Set variable'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish plan artifact'
      inputs:
        targetPath: '$(Pipeline.Workspace)/Output'
        artifact: 'Evaluate'
        publishLocation: 'pipeline'
- stage: Apply
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: Plan
  condition: and(succeeded(), eq(dependencies.Plan.outputs['Evaluate.Variable.ShouldRun'], 'true'))
  jobs:
  - deployment: Deploy
    continueOnError: false
    environment: $(Environment)
    strategy:
     runOnce:
       deploy:
        steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: 'Terraform Install'
            inputs:
              terraformVersion: '$(terraformVersion)'
          - task: TerraformCLI@0
            displayName: 'Terraform Initialise'
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/v25/'
              backendType: 'azurerm'
              backendServiceArm: '$(backendServiceArm)'
              ensureBackend: true
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'
          - task: TerraformCLI@0
            displayName: 'Terraform Apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/v25/'
              environmentServiceName: '$(backendServiceArm)'
              commandOptions: '$(Pipeline.Workspace)/Evaluate/terraform.tfplan'